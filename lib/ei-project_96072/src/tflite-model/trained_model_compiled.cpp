/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 20.04.2022 03:51:53

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3344;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1274 } };
const TfArray<1, float> quant0_scale = { 1, { 0.051263313740491867, } };
const TfArray<1, int> quant0_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 98, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 98, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 49, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 49, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ 1,18,-53,78,62,-69,-1,9,51,-70,-22,-16,5, 61,-36,-10,-24,21,-13,-25,-22,16,-46,9,49,8, -127,81,60,-23,-20,16,-37,-42,59,14,-84,-55,-27, 
  /* [1][0][][] */ -37,19,-63,58,40,-74,93,-97,40,84,-30,-11,21, -14,-34,-1,64,32,47,67,-99,118,-38,-127,71,19, -42,49,-96,104,64,-124,64,-69,12,-63,13,14,-1, 
  /* [2][0][][] */ -44,-53,-124,109,-47,-70,25,7,-62,1,6,58,28, -31,-21,-101,69,-10,-77,127,-82,-6,-34,46,25,-25, 8,-42,-84,27,-21,-81,105,-91,-15,-11,-18,-17,21, 
  /* [3][0][][] */ -39,66,-25,31,100,-127,-34,13,-27,30,5,-5,-5, -4,104,-26,-2,55,-96,-49,3,24,50,-77,81,-7, -52,26,2,-46,66,-49,-56,-34,1,17,-24,55,-23, 
  /* [4][0][][] */ -15,-26,-127,25,95,-7,9,15,-49,3,23,12,24, 57,27,-71,20,-45,0,-91,11,19,24,-56,19,63, 28,25,56,-78,-44,0,106,1,-33,-64,70,75,-24, 
  /* [5][0][][] */ 107,116,37,-40,-29,-21,-6,-62,-12,-47,6,60,52, -92,-52,-19,-11,50,-41,61,2,22,38,13,49,-24, 127,-20,-36,72,71,32,-107,-38,22,46,-6,-7,-46, 
  /* [6][0][][] */ -43,-66,-127,-120,-49,30,97,24,-16,47,12,-8,-3, -8,61,-6,34,9,-1,-42,-10,38,-30,0,-4,-46, -76,-69,46,29,-78,-8,3,74,20,16,20,-65,-35, 
  /* [7][0][][] */ -12,-57,-11,63,-11,-106,-33,14,-43,28,-60,-15,4, 106,64,61,-55,-26,79,-67,-10,-44,39,28,5,4, -10,-78,80,46,-27,37,77,-70,-48,-30,123,-33,127, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0043190061114728451, 0.0036219661124050617, 0.0035462065134197474, 0.0040994132868945599, 0.004213918000459671, 0.0033241098280996084, 0.0041851787827908993, 0.0036882350686937571, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -1059, -593, -1287, -1770, -786, -1124, -791, -565, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00022140656074043363, 0.00018567398365121335, 0.00018179029575549066, 0.00021014950470998883, 0.00021601939806714654, 0.00017040489183273166, 0.00021454613306559622, 0.00018907115736510605, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ -53,-86,-62,103,-66,-80,90,-63, 61,-23,-67,9,-10,-127,37,-67, 51,-83,71,86,22,70,58,-5, 
  /* [1][0][][] */ -119,94,-45,-51,-40,-29,28,-3, -70,-23,30,18,-58,17,-35,-8, 1,127,65,94,36,-26,-49,6, 
  /* [2][0][][] */ -45,61,-68,-112,51,106,-61,-88, 98,-55,-39,70,86,-10,-40,127, -33,-86,-66,-52,50,44,94,-31, 
  /* [3][0][][] */ -68,45,-34,6,-28,125,-60,78, -45,-19,-6,38,40,102,89,-24, -1,-127,46,-28,-102,28,75,-121, 
  /* [4][0][][] */ -58,50,108,-25,58,-108,-54,53, -93,14,61,-34,-38,-70,-31,91, 53,-92,60,67,-94,127,-125,65, 
  /* [5][0][][] */ 76,-97,-96,59,43,127,9,76, -56,-94,-88,62,11,111,-94,-48, -26,-14,85,-21,106,-36,-70,30, 
  /* [6][0][][] */ 45,71,57,39,-22,13,-76,-1, 30,18,51,-54,-20,21,-33,-127, -64,88,26,-27,25,-57,-41,-96, 
  /* [7][0][][] */ -101,-44,8,-20,-61,95,98,31, 78,-60,-91,-7,127,106,78,-109, -99,-64,-63,2,95,65,-72,73, 
  /* [8][0][][] */ -63,-39,92,-38,-37,-62,-17,88, -54,-56,-122,127,60,81,69,28, 30,-124,-11,-103,-34,-53,83,10, 
  /* [9][0][][] */ -31,-67,39,-47,26,1,-15,-52, -62,90,102,-111,14,-54,54,-15, -127,17,109,-32,-11,-49,13,-2, 
  /* [10][0][][] */ 3,-28,4,-20,63,-84,-115,32, 107,-27,-41,7,104,62,113,-67, 21,-10,-47,-95,-77,-43,127,-93, 
  /* [11][0][][] */ 41,-97,-42,20,-47,-106,110,-47, -58,73,49,-111,-65,-19,75,78, 27,7,-118,84,127,-117,94,23, 
  /* [12][0][][] */ 91,-19,-103,-33,71,65,66,-127, -23,-30,18,-29,118,-55,84,32, 24,-16,-91,-52,-19,116,4,19, 
  /* [13][0][][] */ 20,-30,-127,86,-11,-45,-55,-40, 10,-127,-66,51,50,-25,-51,-46, -8,-110,-71,105,34,3,14,-51, 
  /* [14][0][][] */ 8,42,70,32,-97,45,-49,-127, 4,85,-40,7,44,-23,-24,-74, -29,94,64,-18,-44,6,-20,-65, 
  /* [15][0][][] */ 66,3,-46,-12,-37,-5,-26,-10, -34,-2,-36,-78,56,98,127,-8, 79,-63,-27,-69,39,29,-36,57, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0028916180599480867, 0.0034729789476841688, 0.0027844649739563465, 0.0021555905696004629, 0.0027092588134109974, 0.003017632057890296, 0.0035252703819423914, 0.0029690701048821211, 0.0025548175908625126, 0.0034389491192996502, 0.0024885344319045544, 0.0021386700682342052, 0.0028736006934195757, 0.0049815643578767776, 0.0036543442402034998, 0.0035577723756432533, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -457, -176, -915, -2361, 427, -750, -347, -1269, -90, -120, -1554, -1076, -1417, 491, -139, -1068, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 7.6712298323400319e-05, 9.2135334853082895e-05, 7.3869610787369311e-05, 5.718608372262679e-05, 7.1874455898068845e-05, 8.0055346188601106e-05, 9.3522583483718336e-05, 7.8767036029603332e-05, 6.7777255026157945e-05, 9.1232548584230244e-05, 6.6018816141877323e-05, 5.6737193517619744e-05, 7.6234311563894153e-05, 0.00013215688522905111, 9.6946809208020568e-05, 9.4384835392702371e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[3*400] = { 
  -10, -67, -12, 10, 12, -3, -7, 15, -17, -1, 2, -1, 11, 48, -28, 1, 7, 7, -13, -13, 27, 18, 15, -4, -12, -18, -11, -11, -8, 75, -29, -11, 0, 9, 12, -12, -23, 57, -21, 20, 19, -56, 20, -20, -2, -7, -31, 46, -36, -32, 27, 6, -39, 42, -22, 6, -35, -28, -23, -17, -17, -18, -6, 28, 24, 3, 22, -2, 3, 16, 6, 39, 3, -57, 9, -20, 19, 9, -68, 29, 13, 24, 17, -15, 14, 28, -62, 40, 15, -30, 38, 0, 22, 17, -32, 14, -27, -35, 28, 29, -39, -26, -13, 28, -9, -25, -10, 7, 30, 15, -50, 33, -35, -33, -14, -22, 5, 32, -12, 51, -20, -41, 3, -30, 6, 36, -60, -20, -31, 0, 4, 9, -25, 32, -27, 53, -45, -1, 5, 7, 34, -66, 6, 19, -31, 5, 28, 40, 14, -18, -37, 67, 42, -19, 15, 9, 34, 2, -53, 73, -1, -6, 63, -3, -44, 80, -33, 47, 13, -47, 20, 30, 37, -9, -14, 36, -28, -76, 1, 28, 6, 1, -24, 9, -26, -52, 30, -12, 71, -58, -40, 69, 12, -3, 31, -2, -34, 53, -17, 99, 26, -44, 43, -7, 9, -40, -57, 59, -42, -64, 34, 32, -58, 30, 21, 39, -1, -34, 37, -27, 37, -65, 12, 16, -48, -23, 72, 4, -13, 18, -61, 46, -26, -49, 0, 19, 39, -26, -72, 54, -11, -11, 73, 31, -9, 42, -56, 23, 14, -32, 0, 3, 11, 2, -27, 55, -31, -62, 70, -1, -9, 37, -32, 43, 20, -46, 64, 20, 53, -63, -16, 70, 5, -4, 49, -12, 3, 9, -41, 54, 17, -66, 62, -16, 26, -65, -59, 50, 21, -54, 33, 2, -56, 24, -43, 59, -1, -27, 47, 26, 44, -73, 13, 31, -19, -22, 43, 22, 0, -5, -35, 30, -30, -41, -5, -5, 38, -79, -40, 52, -34, 4, 9, 16, -59, 16, -28, 1, 42, -37, 34, -3, 24, -63, -61, 29, 16, -43, -2, 30, -50, -19, -15, 45, -23, -7, 55, 43, 55, -97, -23, 59, 4, 20, 46, 36, -31, -15, -40, -13, 33, -20, 67, 43, -14, -63, -61, 55, 18, -31, 5, 8, -60, -7, -3, 40, -6, -39, 61, -5, 40, -71, -7, 36, 4, -93, -41, -14, -61, -68, 17, 38, 10, 21, 7, 29, 27, -127, -32, 82, 
  31, 15, 14, -14, 19, -17, 10, -21, 0, 18, -10, 18, 33, -37, 27, -6, -51, 39, 3, 20, 6, 23, 5, 28, -12, 43, -14, 0, 25, -106, 29, 7, -13, 47, 48, 18, 15, -6, 10, 22, -6, 22, -2, 13, -13, -57, 22, -3, 18, -25, -49, 13, -12, -45, 50, -5, -15, 41, 10, -23, 13, -89, 18, -4, -7, 58, -18, -23, 20, 15, 3, 21, -35, 6, 29, 4, 11, -81, 17, 0, 13, -12, 25, 12, -2, -66, 40, 1, -3, -1, -19, 3, 8, -60, 42, 7, 31, 40, 3, 10, 22, -3, 27, 62, 23, 35, -14, 23, 41, -87, 29, 29, -28, 25, -13, 20, 25, -7, 30, 3, -29, 16, 7, 29, 20, -105, 45, -15, 32, 26, -56, 26, -11, -9, 9, 5, 31, -4, 33, -15, 5, -85, 16, 6, -31, 29, -17, 11, -12, -14, 53, -16, 17, 28, -37, 36, -19, -102, 26, -13, -21, 8, -43, 11, -14, -74, 51, -56, 2, 13, -10, -12, -6, -84, 56, -46, 4, 19, -53, -27, 5, 10, 5, 6, -37, 50, -18, 24, -19, -99, 7, -20, -7, 21, -5, -1, 12, -52, 33, -23, -10, 11, 23, 3, -5, -51, 42, -40, 7, 27, -48, 35, -32, -22, 32, 1, 1, 4, 11, -6, -30, -58, 43, -38, 10, 22, -25, 14, 7, -27, 2, 22, 2, 7, -22, 42, -18, -87, 51, -36, -17, 27, -16, 3, 25, -9, -4, -16, -24, 10, 22, -33, -23, -88, 12, -20, 11, 43, -55, 21, -24, 11, 35, -6, 15, 29, 15, 16, -9, -39, 20, -29, -29, 30, -51, -9, 38, -64, 21, -41, 17, 4, -2, -35, 5, -27, 39, -37, -20, -2, -16, -18, 12, 11, 51, -44, -36, -32, -15, -30, -21, -76, 45, -38, -39, 46, -28, -4, 30, -10, 21, 14, 21, 43, -27, -30, -40, -32, 31, -60, -36, 45, -48, 7, 2, -22, 23, -30, 7, -28, -3, -50, -7, -13, 35, -40, -47, 31, 7, 17, 36, 25, 47, -23, -33, 33, -8, -38, -22, -66, 50, -26, -17, -11, -58, -34, 62, -16, 33, -27, 10, -24, -1, -14, -34, -64, 21, -35, 5, 50, 4, -2, 5, 18, -5, -58, -5, -11, -27, -44, -54, -26, 43, 4, -66, -1, 7, 43, 8, -28, 37, -80, 12, -1, 1, 12, -61, -39, 59, -91, 
  -48, 5, -4, 23, 21, 28, -9, 26, 29, -37, -30, -24, -30, 6, -32, -10, -33, 24, 23, -9, 18, -37, -46, -44, -1, -13, -21, 27, 5, 42, -13, 15, 18, -6, -8, -28, -1, 8, -14, -34, -26, 2, 3, 7, -30, 16, -24, 18, -24, 7, 23, -3, -9, -13, -25, -1, 24, 10, -11, -30, -8, 59, -9, -1, 23, 6, 0, 18, 1, 14, 3, -54, 9, 26, -16, -23, -1, 25, -31, -6, -13, 20, -15, -30, 26, 18, 6, 10, 4, 13, 28, 14, 13, 54, 14, -26, -27, 9, 15, -20, 21, 40, 9, -55, 13, -5, -33, -5, -18, 89, -31, 7, -12, 18, -18, 0, -2, 1, -2, -7, -10, 52, -26, 14, -11, 66, 19, 26, -18, -50, 43, -35, 35, 24, -32, 0, 18, 10, 25, -8, 18, 95, -57, 0, 4, -42, -37, -23, 4, 34, -4, -5, 28, 6, 16, 0, -15, 74, -22, 11, -19, 34, 17, -22, -19, 34, -1, -4, 14, 28, 9, 18, 51, 59, 29, 11, 20, -40, 22, -4, 22, 11, -34, -42, 36, -6, -26, -38, -26, 106, -23, -41, 20, -12, -50, -28, -24, 4, -2, -23, -29, 7, -35, 4, -21, 53, 9, 6, 12, 21, 35, -29, 25, -12, -6, -53, -7, -1, -9, -17, -11, 77, -44, 3, 35, -42, -36, 13, -3, 8, 33, 25, -4, -12, 31, 15, -23, 71, -19, 3, 36, -6, -52, -16, 21, 18, 9, -40, -1, 20, 6, 1, 18, 74, 1, 12, 23, 18, 14, 13, -1, 31, -5, -1, 46, 5, 9, 26, 7, 83, -61, -15, 30, -6, -21, 22, 1, 18, -4, -19, -29, 19, -8, -1, 2, 80, 9, -39, 35, 15, 27, -28, 55, -32, -39, -38, -18, -6, -31, 18, -32, 97, -43, 33, 23, -14, -5, 40, 15, 23, 12, -3, 8, 45, 56, -24, -22, 52, -14, 38, 39, 18, -20, -40, -11, 7, -8, -42, -6, 38, -15, -7, -5, 40, -23, -25, 1, -11, 26, -25, 9, 5, -13, 8, 31, 0, -13, -5, -14, 62, -19, 19, 24, -12, 26, 23, -34, 59, 32, -39, -34, -2, 9, 28, -40, 55, -7, -5, 26, 27, -4, -27, 35, -33, -41, 7, -18, 17, 37, 37, 53, 97, -3, -4, 60, 79, 67, 42, -15, 62, -30, 15, 10, -5, 35, 19, 5, 115, -10, -3, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 3,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.003576640272513032, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[3] = { -1261, 604, 284, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const TfArray<1, float> quant11_scale = { 1, { 8.4619387052953243e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,98,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.051263313740491867, } };
const TfArray<1, int> quant12_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,98,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.026529194787144661, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,98,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.026529194787144661, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,49,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.026529194787144661, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,49,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.026529194787144661, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,49,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.023658903315663338, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,49,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.023658903315663338, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.023658903315663338, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.023658903315663338, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.098589830100536346, } };
const TfArray<1, int> quant21_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension0, 1274, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1274, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension13, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension15, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 392, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension17, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
